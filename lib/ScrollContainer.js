"use strict";var _reactDom=require("react-dom"),React=require("react"),assign=require("object-assign"),buffer=require("buffer-function"),Scroller=require("./Scroller");function stop(g){g.preventDefault(),g.stopPropagation()}module.exports=React.createClass({displayName:"ReactMenuScrollContainer",getInitialState:function(){return{adjustScroll:!0,scrollPos:0}},getDefaultProps:function(){return{scrollStep:5,scrollSpeed:50}},componentWillUnmount:function(){this.props.enableScroll&&window.removeEventListener("resize",this.onResizeListener)},componentDidMount:function(){this.props.enableScroll&&setTimeout(function(){this.isMounted()&&(this.adjustScroll(),window.addEventListener("resize",this.onResizeListener=buffer(this.onWindowResize,this.props.onWindowResizeBuffer,this)))}.bind(this),0)},componentDidUpdate:function(){this.props.enableScroll&&this.adjustScroll()},onWindowResize:function(){this.adjustScroll(),this.doScroll(0)},render:function(){var h=this.props,i=h.children;if(!h.enableScroll)return i;var j={position:"relative"};this.state.scrollPos&&(j.top=-this.state.scrollPos);var k={position:"relative",overflow:"hidden"};return h.maxHeight&&(k.maxHeight=h.maxHeight),React.createElement("div",{onMouseEnter:h.onMouseEnter,onMouseLeave:h.onMouseLeave,className:"z-menu-scroll-container",style:k},React.createElement("div",{ref:"tableWrap",style:j},i),this.renderScroller(h,-1),this.renderScroller(h,1))},renderScroller:function(h,i){var j=-1==i?this.handleScrollTop:this.handleScrollBottom,k=-1==i?this.handleScrollTopMax:this.handleScrollBottomMax,l=-1==i?this.state.hasTopScroll:this.state.hasBottomScroll,m=assign({},h.scrollerProps,{visible:l,side:-1==i?"top":"bottom",onMouseDown:j,onDoubleClick:k});return React.createElement(Scroller,m)},adjustScroll:function(){if(this.props.enableScroll){if(!this.state.adjustScroll)return void(this.state.adjustScroll=!0);var h=this.getAvailableHeight(),i=this.getCurrentTableHeight(),j={adjustScroll:!1,hasTopScroll:!1,hasBottomScroll:!1};i>h?(j.maxScrollPos=i-h,j.hasTopScroll=0!==this.state.scrollPos,j.hasBottomScroll=this.state.scrollPos!=j.maxScrollPos):(j.maxScrollPos=0,j.scrollPos=0),this.setState(j)}},getAvailableHeight:function(){return this.getAvailableSizeDOM().clientHeight},getAvailableSizeDOM:function(){return(0,_reactDom.findDOMNode)(this)},getCurrentTableHeight:function(){return this.getCurrentSizeDOM().clientHeight},getCurrentSizeDOM:function(){return(0,_reactDom.findDOMNode)(this.refs.tableWrap)},handleScrollTop:function(h){h.preventDefault(),this.handleScroll(-1)},handleScrollBottom:function(h){h.preventDefault(),this.handleScroll(1)},handleScrollTopMax:function(h){stop(h),this.handleScrollMax(-1)},handleScrollBottomMax:function(h){stop(h),this.handleScrollMax(1)},handleScrollMax:function(h){var i=-1==h?0:this.state.maxScrollPos;this.setScrollPosition(i)},handleScroll:function(h/*1 to bottom, -1 to up*/){var i=function(){this.stopScroll(),window.removeEventListener("mouseup",i)}.bind(this);window.addEventListener("mouseup",i),this.scrollInterval=setInterval(this.doScroll.bind(this,h),this.props.scrollSpeed)},doScroll:function(h){this.setState({scrollDirection:h});var i=this.state.scrollPos+h*this.props.scrollStep;this.setScrollPosition(i)},setScrollPosition:function(h){h>this.state.maxScrollPos&&(h=this.state.maxScrollPos),0>h&&(h=0),this.setState({scrollPos:h,scrolling:!0})},stopScroll:function(){clearInterval(this.scrollInterval),this.setState({scrolling:!1})}});